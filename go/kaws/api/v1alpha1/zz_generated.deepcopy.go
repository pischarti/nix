//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventRecycler) DeepCopyInto(out *EventRecycler) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventRecycler.
func (in *EventRecycler) DeepCopy() *EventRecycler {
	if in == nil {
		return nil
	}
	out := new(EventRecycler)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EventRecycler) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventRecyclerList) DeepCopyInto(out *EventRecyclerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]EventRecycler, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventRecyclerList.
func (in *EventRecyclerList) DeepCopy() *EventRecyclerList {
	if in == nil {
		return nil
	}
	out := new(EventRecyclerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EventRecyclerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventRecyclerSpec) DeepCopyInto(out *EventRecyclerSpec) {
	*out = *in
	out.WatchInterval = in.WatchInterval
	if in.SearchTerms != nil {
		in, out := &in.SearchTerms, &out.SearchTerms
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	out.PollInterval = in.PollInterval
	out.RecycleTimeout = in.RecycleTimeout
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventRecyclerSpec.
func (in *EventRecyclerSpec) DeepCopy() *EventRecyclerSpec {
	if in == nil {
		return nil
	}
	out := new(EventRecyclerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EventRecyclerStatus) DeepCopyInto(out *EventRecyclerStatus) {
	*out = *in
	in.LastCheckTime.DeepCopyInto(&out.LastCheckTime)
	if in.ActiveRecycles != nil {
		in, out := &in.ActiveRecycles, &out.ActiveRecycles
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.RecycleHistory != nil {
		in, out := &in.RecycleHistory, &out.RecycleHistory
		*out = make([]RecycleHistoryEntry, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EventCounts != nil {
		in, out := &in.EventCounts, &out.EventCounts
		*out = make(map[string]int, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EventRecyclerStatus.
func (in *EventRecyclerStatus) DeepCopy() *EventRecyclerStatus {
	if in == nil {
		return nil
	}
	out := new(EventRecyclerStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecycleHistoryEntry) DeepCopyInto(out *RecycleHistoryEntry) {
	*out = *in
	in.Timestamp.DeepCopyInto(&out.Timestamp)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecycleHistoryEntry.
func (in *RecycleHistoryEntry) DeepCopy() *RecycleHistoryEntry {
	if in == nil {
		return nil
	}
	out := new(RecycleHistoryEntry)
	in.DeepCopyInto(out)
	return out
}
